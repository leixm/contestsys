<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.app.dao.SimproblemMapper" >
  <resultMap id="BaseResultMap" type="com.code.model.Simproblem" >
    <id column="simproblem_id" property="simproblemId" jdbcType="INTEGER" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="paper_id" property="paperId" jdbcType="INTEGER" />
    <result column="score" property="score" jdbcType="DECIMAL" />
    <result column="pos" property="pos" jdbcType="INTEGER" />
    <result column="blanks" property="blanks" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.code.model.Simproblem" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  
  <resultMap type="com.code.model.OneSimproblem" id="simproblemOptionResultMap">
	  <id column="simproblem_id" property="simproblemId"/>
      <association property="simproblem" javaType="com.code.model.Simproblem">
           <id column="simproblem_id" property="simproblemId" jdbcType="INTEGER" />
		   <result column="type" property="type" jdbcType="INTEGER" />
		   <result column="paper_id" property="paperId" jdbcType="INTEGER" />
		   <result column="score" property="score" jdbcType="DECIMAL" />
		   <result column="pos" property="pos" jdbcType="INTEGER" />
		   <result column="blanks" property="blanks" jdbcType="INTEGER" />
		   <result column="content" property="content"/>
      </association>
      <collection property="option" ofType="com.code.model.Options">
          <id column="option_id" property="optionId" jdbcType="INTEGER" />
   		  <result column="simproblem_id" property="simproblemId" jdbcType="INTEGER" />
   		  <result column="Pos1" property="pos" jdbcType="INTEGER" />
          <result column="Content1" property="content"/>
      </collection>

  </resultMap>
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    simproblem_id, type, paper_id, score, pos, blanks
  </sql>
  <sql id="Blob_Column_List" >
    content
  </sql>
  
  <select id="getSimproblemAndOptionByPaperId" resultMap="simproblemOptionResultMap" parameterType="java.lang.Integer">
    select
    simproblem.simproblem_id simproblem_id,
    simproblem.*,
    options.option_id,options.simproblem_id,options.pos Pos1,options.content Content1
    from simproblem
    left join options on options.simproblem_id = simproblem.simproblem_id
    where simproblem.paper_id = #{paper_id};
  </select>
  
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.code.model.SimproblemExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from simproblem
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.code.model.SimproblemExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from simproblem
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from simproblem
    where simproblem_id = #{simproblemId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from simproblem
    where simproblem_id = #{simproblemId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.code.model.SimproblemExample" >
    delete from simproblem
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.code.model.Simproblem" >
    insert into simproblem (simproblem_id, type, paper_id, 
      score, pos, blanks, 
      content)
    values (#{simproblemId,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, #{paperId,jdbcType=INTEGER}, 
      #{score,jdbcType=DECIMAL}, #{pos,jdbcType=INTEGER}, #{blanks,jdbcType=INTEGER}, 
      #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.code.model.Simproblem" >
    insert into simproblem
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="simproblemId != null" >
        simproblem_id,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="paperId != null" >
        paper_id,
      </if>
      <if test="score != null" >
        score,
      </if>
      <if test="pos != null" >
        pos,
      </if>
      <if test="blanks != null" >
        blanks,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="simproblemId != null" >
        #{simproblemId,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="paperId != null" >
        #{paperId,jdbcType=INTEGER},
      </if>
      <if test="score != null" >
        #{score,jdbcType=DECIMAL},
      </if>
      <if test="pos != null" >
        #{pos,jdbcType=INTEGER},
      </if>
      <if test="blanks != null" >
        #{blanks,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.code.model.SimproblemExample" resultType="java.lang.Integer" >
    select count(*) from simproblem
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update simproblem
    <set >
      <if test="record.simproblemId != null" >
        simproblem_id = #{record.simproblemId,jdbcType=INTEGER},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.paperId != null" >
        paper_id = #{record.paperId,jdbcType=INTEGER},
      </if>
      <if test="record.score != null" >
        score = #{record.score,jdbcType=DECIMAL},
      </if>
      <if test="record.pos != null" >
        pos = #{record.pos,jdbcType=INTEGER},
      </if>
      <if test="record.blanks != null" >
        blanks = #{record.blanks,jdbcType=INTEGER},
      </if>
      <if test="record.content != null" >
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update simproblem
    set simproblem_id = #{record.simproblemId,jdbcType=INTEGER},
      type = #{record.type,jdbcType=INTEGER},
      paper_id = #{record.paperId,jdbcType=INTEGER},
      score = #{record.score,jdbcType=DECIMAL},
      pos = #{record.pos,jdbcType=INTEGER},
      blanks = #{record.blanks,jdbcType=INTEGER},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update simproblem
    set simproblem_id = #{record.simproblemId,jdbcType=INTEGER},
      type = #{record.type,jdbcType=INTEGER},
      paper_id = #{record.paperId,jdbcType=INTEGER},
      score = #{record.score,jdbcType=DECIMAL},
      pos = #{record.pos,jdbcType=INTEGER},
      blanks = #{record.blanks,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.code.model.Simproblem" >
    update simproblem
    <set >
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="paperId != null" >
        paper_id = #{paperId,jdbcType=INTEGER},
      </if>
      <if test="score != null" >
        score = #{score,jdbcType=DECIMAL},
      </if>
      <if test="pos != null" >
        pos = #{pos,jdbcType=INTEGER},
      </if>
      <if test="blanks != null" >
        blanks = #{blanks,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where simproblem_id = #{simproblemId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.code.model.Simproblem" >
    update simproblem
    set type = #{type,jdbcType=INTEGER},
      paper_id = #{paperId,jdbcType=INTEGER},
      score = #{score,jdbcType=DECIMAL},
      pos = #{pos,jdbcType=INTEGER},
      blanks = #{blanks,jdbcType=INTEGER},
      content = #{content,jdbcType=LONGVARCHAR}
    where simproblem_id = #{simproblemId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.code.model.Simproblem" >
    update simproblem
    set type = #{type,jdbcType=INTEGER},
      paper_id = #{paperId,jdbcType=INTEGER},
      score = #{score,jdbcType=DECIMAL},
      pos = #{pos,jdbcType=INTEGER},
      blanks = #{blanks,jdbcType=INTEGER}
    where simproblem_id = #{simproblemId,jdbcType=INTEGER}
  </update>
</mapper>