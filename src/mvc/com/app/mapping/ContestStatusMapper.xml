<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.app.dao.ContestStatusMapper" >
  <resultMap id="BaseResultMap" type="com.code.model.ContestStatus" >
    <id column="contest_status_id" property="contestStatusId" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="student" property="student" jdbcType="VARCHAR" />
    <result column="contest_id" property="contestId" jdbcType="INTEGER" />
    <result column="score" property="score" jdbcType="DECIMAL" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    contest_status_id, status, student, contest_id, score
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.code.model.ContestStatusExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from contest_status
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from contest_status
    where contest_status_id = #{contestStatusId,jdbcType=INTEGER}
  </select>
  
  
    <select id="GetAllContestStudent" resultType="map" parameterType="java.lang.String">
  select user.user_id,user.realName,class.name from 
  contest_status,user,class 
  where contest_status.contest_id=#{0} and contest_status.student=user.user_id and user.class_id=class.class_id
  </select>
  
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from contest_status
    where contest_status_id = #{contestStatusId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.code.model.ContestStatusExample" >
    delete from contest_status
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.code.model.ContestStatus" >
    insert into contest_status (contest_status_id, status, student, 
      contest_id, score)
    values (#{contestStatusId,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{student,jdbcType=VARCHAR}, 
      #{contestId,jdbcType=INTEGER}, #{score,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.code.model.ContestStatus" >
    insert into contest_status
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="contestStatusId != null" >
        contest_status_id,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="student != null" >
        student,
      </if>
      <if test="contestId != null" >
        contest_id,
      </if>
      <if test="score != null" >
        score,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="contestStatusId != null" >
        #{contestStatusId,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="student != null" >
        #{student,jdbcType=VARCHAR},
      </if>
      <if test="contestId != null" >
        #{contestId,jdbcType=INTEGER},
      </if>
      <if test="score != null" >
        #{score,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.code.model.ContestStatusExample" resultType="java.lang.Integer" >
    select count(*) from contest_status
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update contest_status
    <set >
      <if test="record.contestStatusId != null" >
        contest_status_id = #{record.contestStatusId,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.student != null" >
        student = #{record.student,jdbcType=VARCHAR},
      </if>
      <if test="record.contestId != null" >
        contest_id = #{record.contestId,jdbcType=INTEGER},
      </if>
      <if test="record.score != null" >
        score = #{record.score,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update contest_status
    set contest_status_id = #{record.contestStatusId,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      student = #{record.student,jdbcType=VARCHAR},
      contest_id = #{record.contestId,jdbcType=INTEGER},
      score = #{record.score,jdbcType=DECIMAL}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.code.model.ContestStatus" >
    update contest_status
    <set >
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="student != null" >
        student = #{student,jdbcType=VARCHAR},
      </if>
      <if test="contestId != null" >
        contest_id = #{contestId,jdbcType=INTEGER},
      </if>
      <if test="score != null" >
        score = #{score,jdbcType=DECIMAL},
      </if>
    </set>
    where contest_status_id = #{contestStatusId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.code.model.ContestStatus" >
    update contest_status
    set status = #{status,jdbcType=INTEGER},
      student = #{student,jdbcType=VARCHAR},
      contest_id = #{contestId,jdbcType=INTEGER},
      score = #{score,jdbcType=DECIMAL}
    where contest_status_id = #{contestStatusId,jdbcType=INTEGER}
  </update>
  
  <select id="selStuScoreBykeyword" resultType="map">
  		select u.user_id as stuid ,u.realName as stuname,b.name as classname,c.title as contestname,date_format(c.startTime,'%Y-%m-%d') as contesttime,a.score,a.contest_status_id
		from contest_status a 
		left join user u on a.student = u.user_id 
		left join class b on u.class_id=b.class_id
		left join contest c on a.contest_id=c.contest_id
		<where>
			<if test="classname!=null and classname!=''">
				and b.name like "%"#{classname}"%"
			</if>
			
			<if test="stuid!=null and stuid!=''">
				and u.user_id like "%"#{stuid}"%"
			</if>
			
			<if test="stuname!=null and stuname!=''">
				and u.realName like "%"#{stuname}"%"
			</if>
			
			<if test="contestname!=null and contestname!=''">
				and c.title like "%"#{contestname}"%"
			</if>
		</where>
		order by b.class_id
  </select>
  
  <update id="updateScore" >
  		 UPDATE contest_status SET score = #{score} WHERE contest_status_id = #{cstatusid}
  </update>
  
  <select id="selOwnContestBykeyword" resultType="map">
  		select  b.title as title, date_format(b.startTime,'%Y-%m-%d %H:%i') as starttime,date_format(b.endTime,'%Y-%m-%d %H:%i') as endtime,u.realName as teacher
		from contest_status as a  
		left join contest as b on a.contest_id = b.contest_id
		left join user as u on b.teacher = u.user_id
		<where>
			<if test="stuid!=null and stuid!=''">
				and a.student like "%"#{stuid}"%"
			</if >
			<if test="keyword!=null and keyword!=''">
				and	(b.title like "%"#{keyword}"%" or u.realName like "%"#{keyword}"%")
			</if>
		</where>
		
  </select>
  
  <select id="selClassContestAVGbyKeyword" resultType="map">
  		SELECT b.name as classname,c.title, ROUND(AVG(a.score),2) as average,
  		ROUND(MAX(a.score),2) as maxscore,  ROUND(MIN(a.score),2) as minscore
		FROM contest_status a 
		LEFT JOIN user u on a.student = u.user_id 
		LEFT JOIN class b on u.class_id=b.class_id
		LEFT JOIN contest c on a.contest_id=c.contest_id
		WHERE 1=1 
		<if test="classname!=null and classname!=''">
			and b.name in
			<foreach collection="classname" item="cla" index="index" open="(" close=")" separator=",">
				 #{cla}
	        </foreach>
		</if>
		
		<if test="contestname!=null and contestname!=''">
			and c.title in
			<foreach collection="contestname" item="item" index="index" open="(" close=")" separator=",">
				 #{item}
	        </foreach>
		</if>
		
		GROUP BY b.class_id,c.contest_id
		ORDER BY b.class_id
  </select>
  
</mapper>