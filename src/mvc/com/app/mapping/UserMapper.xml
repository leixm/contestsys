<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.app.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="com.code.model.User" >
    <id column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="validateCode" property="validatecode" jdbcType="VARCHAR" />
    <result column="level" property="level" jdbcType="INTEGER" />
    <result column="realName" property="realname" jdbcType="VARCHAR" />
    <result column="class_id" property="classId" jdbcType="INTEGER" />
    <result column="registerTime" property="registertime" jdbcType="TIMESTAMP" />
    <result column="validateTime" property="validatetime" jdbcType="TIMESTAMP" />
    <result column="state" property="state" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    user_id, password, email, validateCode, level, realName, class_id, registerTime, 
    validateTime, state
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.code.model.UserExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from user
    where user_id = #{userId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from user
    where user_id = #{userId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.code.model.UserExample" >
    delete from user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.code.model.User" >
    insert into user (user_id, password, email, 
      validateCode, level, realName, 
      class_id, registerTime, validateTime, 
      state)
    values (#{userId,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{validatecode,jdbcType=VARCHAR}, #{level,jdbcType=INTEGER}, #{realname,jdbcType=VARCHAR}, 
      #{classId,jdbcType=INTEGER}, #{registertime,jdbcType=TIMESTAMP}, #{validatetime,jdbcType=TIMESTAMP}, 
      #{state,jdbcType=INTEGER})
  </insert>
  
  <insert id="insertStuByExcel" parameterType="com.code.model.User" >
    insert into user (user_id, realName, password, class_id, level, state)
    values (#{userId,jdbcType=VARCHAR}, #{realname,jdbcType=VARCHAR},  #{password,jdbcType=VARCHAR},  #{classId,jdbcType=INTEGER},
   #{level,jdbcType=INTEGER},  #{state,jdbcType=INTEGER})
  </insert>
  
  <insert id="insertTeaByExcel" parameterType="com.code.model.User" >
    insert into user (user_id, realName, password, level, state)
    values (#{userId,jdbcType=VARCHAR}, #{realname,jdbcType=VARCHAR},  #{password,jdbcType=VARCHAR},
   #{level,jdbcType=INTEGER},  #{state,jdbcType=INTEGER})
  </insert>
  
  <insert id="insertSelective" parameterType="com.code.model.User" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="validatecode != null" >
        validateCode,
      </if>
      <if test="level != null" >
        level,
      </if>
      <if test="realname != null" >
        realName,
      </if>
      <if test="classId != null" >
        class_id,
      </if>
      <if test="registertime != null" >
        registerTime,
      </if>
      <if test="validatetime != null" >
        validateTime,
      </if>
      <if test="state != null" >
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="validatecode != null" >
        #{validatecode,jdbcType=VARCHAR},
      </if>
      <if test="level != null" >
        #{level,jdbcType=INTEGER},
      </if>
      <if test="realname != null" >
        #{realname,jdbcType=VARCHAR},
      </if>
      <if test="classId != null" >
        #{classId,jdbcType=INTEGER},
      </if>
      <if test="registertime != null" >
        #{registertime,jdbcType=TIMESTAMP},
      </if>
      <if test="registertime == null" >
        now(),
      </if>
      <if test="validatetime != null" >
        #{validatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.code.model.UserExample" resultType="java.lang.Integer" >
    select count(*) from user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
   
  <select id="listAllStudents" resultType="map" >
    select user_id,email,realName,level,name,registerTime from user
    left join class on user.class_id = class.class_id
    where user.level = 0
    order by user.class_id,user_id
  </select>
   
  <select id="listAllStudentsByKeyword" resultType="map" parameterType="java.lang.String">
   select user_id,email,realName,level,name,registerTime from user
   left join class on user.class_id = class.class_id
   where level=0 and (user.user_id=#{0} or email = #{0} or name=#{0} or realName=#{0}) and user.class_id = class.class_id
   order by user.class_id,user_id
  </select>
  
  <select id="listAllTeachers" resultType="map" >
   select user_id,email,realName,level,registerTime from user where level=1
   order by user_id
  </select>
   
  <select id="listAllTeachersByKeyword" resultType="map" parameterType="java.lang.String"> 
   select user_id,email,realName,level,registerTime from user where level=1 and (user.user_id=#{0} or email = #{0} or realName=#{0})
   order by user_id
  </select>
    
  <update id="updateByExampleSelective" parameterType="map" >
    update user
    <set > 
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null" >
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null" >
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.validatecode != null" >
        validateCode = #{record.validatecode,jdbcType=VARCHAR},
      </if>
      <if test="record.level != null" >
        level = #{record.level,jdbcType=INTEGER},
      </if>
      <if test="record.realname != null" >
        realName = #{record.realname,jdbcType=VARCHAR},
      </if>
      <if test="record.classId != null" >
        class_id = #{record.classId,jdbcType=INTEGER},
      </if>
      <if test="record.registertime != null" >
        registerTime = #{record.registertime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.validatetime != null" >
        validateTime = #{record.validatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.state != null" >
        state = #{record.state,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update user
    set user_id = #{record.userId,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      validateCode = #{record.validatecode,jdbcType=VARCHAR},
      level = #{record.level,jdbcType=INTEGER},
      realName = #{record.realname,jdbcType=VARCHAR},
      class_id = #{record.classId,jdbcType=INTEGER},
      registerTime = #{record.registertime,jdbcType=TIMESTAMP},
      validateTime = #{record.validatetime,jdbcType=TIMESTAMP},
      state = #{record.state,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.code.model.User" >
    update user
    <set >
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="validatecode != null" >
        validateCode = #{validatecode,jdbcType=VARCHAR},
      </if>
      <if test="level != null" >
        level = #{level,jdbcType=INTEGER},
      </if>
      <if test="realname != null" >
        realName = #{realname,jdbcType=VARCHAR},
      </if>
      <if test="classId != null" >
        class_id = #{classId,jdbcType=INTEGER},
      </if>
      <if test="registertime != null" >
        registerTime = #{registertime,jdbcType=TIMESTAMP},
      </if>
      <if test="validatetime != null" >
        validateTime = #{validatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where user_id = #{userId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.code.model.User" >
    update user
    set password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      validateCode = #{validatecode,jdbcType=VARCHAR},
      level = #{level,jdbcType=INTEGER},
      realName = #{realname,jdbcType=VARCHAR},
      class_id = #{classId,jdbcType=INTEGER},
      registerTime = #{registertime,jdbcType=TIMESTAMP},
      validateTime = #{validatetime,jdbcType=TIMESTAMP},
      state = #{state,jdbcType=INTEGER}
    where user_id = #{userId,jdbcType=VARCHAR}
  </update>
  
  <update id="updateStuInfoByStuId" >
    update user
	<set>
	    <if test="stuname!=null and stuname!=''">
	        realName = #{stuname},
	    </if>
    	<if test="stuemail!=null and stuemail!=''">
	        email = #{stuemail},
	    </if>
	    <if test="newpwd!=null and newpwd!=''">
	        password = #{newpwd},
	    </if>
    </set>
    where user_id = #{stuid}
  </update>
  
</mapper>